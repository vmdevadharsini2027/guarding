import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report

# Load transaction data
df = pd.read_csv('transaction_data.csv')

# Feature engineering
df['transaction_amount_log'] = df['transaction_amount'].apply(lambda x: np.log(x + 1))
df['location_distance'] = df.apply(lambda row: calculate_distance(row['location']), axis=1)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(df.drop('is_fraud', axis=1), df['is_fraud'], test_size=0.2, random_state=42)

# Train Random Forest Classifier
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)

# Evaluate model performance
y_pred = rf.predict(X_test)
print('Accuracy:', accuracy_score(y_test, y_pred))
print('Classification Report:')
print(classification_report(y_test, y_pred))

# Use the trained model for real-time detection
def detect_fraud(transaction_data):
    transaction_data = pd.DataFrame(transaction_data)
    transaction_data['transaction_amount_log'] = transaction_data['transaction_amount'].apply(lambda x: np.log(x + 1))
    transaction_data['location_distance'] = transaction_data.apply(lambda row: calculate_distance(row['location']), axis=1)
    prediction = rf.predict(transaction_data)
    return prediction
